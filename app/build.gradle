def getApiKey() {
    def propFile = rootProject.file("./local.properties")
    def properties = new Properties()
    properties.load(new FileInputStream(propFile))
    return properties['TMDB_API_KEY']
}

static String getCurrentDate() {
    def date = new Date()
    def formattedDate = date.format('ddMMyyyy_HHmm')
    return formattedDate
}

plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'dagger.hilt.android.plugin'
    id 'com.google.devtools.ksp' version "1.6.10-1.0.2"
    id 'kotlin-kapt'
    id 'kotlin-parcelize'
    id 'com.google.firebase.crashlytics'
    id 'com.google.firebase.firebase-perf'
    id 'com.google.gms.google-services'
    id "io.gitlab.arturbosch.detekt"
}

android {
    compileSdk 31


    defaultConfig {
        applicationId "com.example.moviesapp"
        minSdk 21
        targetSdk 31
        versionCode 1
        versionName "1.0"

        buildConfigField("String", "TMDB_API_KEY", getApiKey())

        testInstrumentationRunner "com.example.moviesapp.HiltTestRunner"
        vectorDrawables {
            useSupportLibrary true
        }

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += [
                        "room.schemaLocation"  : "$projectDir/schemas".toString(),
                        "room.incremental"     : "true",
                        "room.expandProjection": "true"]
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled = true
            shrinkResources = true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        android.applicationVariants.all { variant ->
            variant.outputs.all { output ->
                def builtType = variant.buildType.name
                def versionName = variant.versionName
                def currentDate = getCurrentDate()

                outputFileName = "app_${builtType}_${versionName}_${currentDate}.apk"
            }
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = '11'
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion compose_version
    }
    packagingOptions {
        resources {
            excludes += ['/META-INF/{AL2.0,LGPL2.1}', '**/attach_hotspot_windows.dll', 'META-INF/licenses/**', 'META-INF/AL2.0', 'META-INF/LGPL2.1']
        }
        jniLibs {
            excludes += ['META-INF/licenses/**']
        }
    }
    namespace 'com.example.moviesapp'
}

kotlin {
    sourceSets {
        debug {
            kotlin.srcDir("build/generated/ksp/debug/kotlin")
        }
        release {
            kotlin.srcDir("build/generated/ksp/release/kotlin")
        }
    }
}

dependencies {
    implementation "androidx.hilt:hilt-navigation-compose:$hilt_navigation_compose_version"

    implementation "androidx.paging:paging-compose:$paging_compose_version"

    implementation "io.github.raamcosta.compose-destinations:animations-core:$compose_destinations_version"
    ksp "io.github.raamcosta.compose-destinations:ksp:$compose_destinations_version"

    implementation "androidx.room:room-ktx:$room_version"
    kapt "androidx.room:room-compiler:$room_version"

    implementation "androidx.compose.ui:ui:$compose_version"
    implementation "androidx.compose.material:material:$compose_version"
    implementation "androidx.compose.ui:ui-tooling-preview:$compose_version"

    implementation "com.google.accompanist:accompanist-systemuicontroller:$accompanist_version"
    implementation "com.google.accompanist:accompanist-insets:$accompanist_version"
    implementation "com.google.accompanist:accompanist-flowlayout:$accompanist_version"
    implementation "com.google.accompanist:accompanist-pager:$accompanist_version"
    implementation "com.google.accompanist:accompanist-swiperefresh:$accompanist_version"
    implementation "com.google.accompanist:accompanist-placeholder:$accompanist_version"
    implementation "com.google.accompanist:accompanist-pager-indicators:$accompanist_version"

    implementation "com.google.dagger:hilt-android:$hilt_version"
    kapt "com.google.dagger:hilt-compiler:$hilt_version"

    implementation "com.squareup.moshi:moshi:$moshi_version"
    kapt "com.squareup.moshi:moshi-kotlin-codegen:$moshi_version"

    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-moshi:$retrofit_version"

    implementation "com.squareup.okhttp3:okhttp:$okhttp_version"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp_version"

    // Import the BoM for the Firebase platform
    implementation platform("com.google.firebase:firebase-bom:$firebase_bom_version")

    // Declare the dependencies for the Crashlytics and Analytics libraries
    // When using the BoM, you don't specify versions in Firebase library dependencies
    implementation 'com.google.firebase:firebase-crashlytics-ktx'
    implementation 'com.google.firebase:firebase-analytics-ktx'
    implementation 'com.google.firebase:firebase-perf-ktx'

    implementation "io.coil-kt:coil-compose:$coil_compose_version"
    implementation "androidx.palette:palette-ktx:$palette_version"
    implementation "androidx.core:core-splashscreen:$splashscreen_version"
    implementation 'androidx.core:core-ktx:1.7.0'
    implementation "androidx.constraintlayout:constraintlayout-compose:$constraint_layout_compose_version"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecyclea_runtime_version"
    implementation "androidx.activity:activity-compose:$activity_compose_version"
    testImplementation 'junit:junit:4.13.2'

    //Instrumented Unit Tests
    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_test_version"
    androidTestImplementation "android.arch.core:core-testing:$core_testing_version"
    androidTestImplementation "com.google.truth:truth:$truth_version"
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation "androidx.test.espresso:espresso-core:$espresso_version"
    androidTestImplementation "org.mockito:mockito-core:$mockito_version"
    androidTestImplementation "com.google.dagger:hilt-android-testing:$hilt_android_testing_version"
    kaptAndroidTest "com.google.dagger:hilt-android-compiler:$hilt_android_testing_version"
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$compose_version"

    debugImplementation "androidx.compose.ui:ui-tooling:$compose_version"
    debugImplementation "com.squareup.leakcanary:leakcanary-android:$leak_canary_version"
}